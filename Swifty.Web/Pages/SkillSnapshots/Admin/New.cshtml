@page
@model Swifty.Web.Pages.SkillSnaphsots.Admin.NewModel
@{
    ViewData["Title"] = "New Skill Snapshot";
    ViewData["PageLayout"] = "fluid";
}

@*// Use some shit javascript to go back and fourth to select the three 'screens'
    // In future use blazor and see if this can make it cleaner

    // Select a user from a dropdown

    // Select skills with green/amber/red colours from skillboard

    // Add a note and save*@

<div id="flowBar">

</div>


<form method="post">

    <span id="userSelection">
        <h4>Select User</h4>

        <div class="form-group">
            @*<label asp-for="NewViewModel.SelectedUserId" class="control-label"></label>*@
            <select asp-for="NewViewModel.SelectedUserId" asp-items="Model.Users.OrderBy(x => x.Text)" class="form-control">
                <option value="">-- Select --</option>
            </select>
            <span asp-validation-for="NewViewModel.SelectedUserId" class="text-danger"></span>
        </div>

    </span>

    <span id="skillBoard" @*hidden*@>

        <div class="tab">
            @foreach (var skillArea in Model.NewViewModel.SkillsByArea)
            {
                <button class="tablinks" onclick="openTab(event, '@skillArea.Key.Id'); return false;">@skillArea.Key.Name</button>
            }
        </div>

        @* This screen is truly disgusting, need to refactor the horrible nesting in the way this is handled in future *@

        @for (int i = 0; i < Model.NewViewModel.SkillsByArea.Count; i++)
        {
            <div id="@Model.NewViewModel.SkillsByArea.ElementAt(i).Key.Id" class="tabcontent">

                <div class="container-fluid">
                    <div class="row">

                        @for (int ii = 0; ii < Model.NewViewModel.SkillsByArea.ElementAt(i).Value.Keys.Count; ii++)
                        {
                        <div class="col">

                            <div style="text-align:center;"><h2>@Model.NewViewModel.SkillsByArea.ElementAt(i).Value.Keys.ElementAt(ii).Value</h2><hr /></div>

                            @for (int iii = 0; iii < Model.NewViewModel.SkillsByArea.ElementAt(i).Value[Model.NewViewModel.SkillsByArea.ElementAt(i).Value.Keys.ElementAt(ii)].Count; iii++)
                            {
                                var skill = Model.NewViewModel.SkillsByArea.ElementAt(i).Value[Model.NewViewModel.SkillsByArea.ElementAt(i).Value.Keys.ElementAt(ii)].ElementAt(iii);

                                var reviewedSkillIndex = Model.NewViewModel.UserReviewedSkills.IndexOf(Model.NewViewModel.UserReviewedSkills.FirstOrDefault(x => x.Id == skill.Id));

                                @Html.HiddenFor(model => model.NewViewModel.UserReviewedSkills[reviewedSkillIndex].Id)
                                @*@Html.HiddenFor(model => model.NewViewModel.UserReviewedSkills[reviewedSkillIndex].Detail)
                                @Html.HiddenFor(model => model.NewViewModel.UserReviewedSkills[reviewedSkillIndex].IsArchived)
                                @Html.HiddenFor(model => model.NewViewModel.UserReviewedSkills[reviewedSkillIndex].SkillAreaId)
                                @Html.HiddenFor(model => model.NewViewModel.UserReviewedSkills[reviewedSkillIndex].SkillLevelId)*@

                                <div class="card-group">
                                    <div class="card mb-4">
                                        <div class="card-body">@skill.Detail</div>
                                        <div class="card-footer text-muted">
                                            <div class="container">
                                                <div class="row">
                                                    <div class="col-sm bg-light ml-1 mr-1" onclick="">
                                                        &#8205;
                                                    </div>
                                                    <div class="col-sm bg-danger border-dark mr-1" onclick="">
                                                        @Html.CheckBoxFor(model => Model.NewViewModel.UserReviewedSkills[reviewedSkillIndex].ReviewedRed)
                                                    </div>
                                                    <div class="col-sm bg-warning border-dark mr-1" onclick="">
                                                        @Html.CheckBoxFor(model => Model.NewViewModel.UserReviewedSkills[reviewedSkillIndex].ReviewedAmber)
                                                    </div>
                                                    <div class="col-sm bg-success border-dark mr-1" onclick="">
                                                        @Html.CheckBoxFor(model => Model.NewViewModel.UserReviewedSkills[reviewedSkillIndex].ReviewedGreen)
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        }
                    </div>
                </div>

            </div>
        }

        <span id="notesAndSave">
            @Html.EditorFor(model => model.NewViewModel.ReviewerNotes)

            <button type="submit">Submit</button>
        </span>

    </span>

</form>



